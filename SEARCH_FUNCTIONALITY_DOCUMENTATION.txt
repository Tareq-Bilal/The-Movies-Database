================================================================================
                    TMDB SEARCH FUNCTIONALITY - FLOW DOCUMENTATION
================================================================================

This document explains the complete search functionality flow in the TMDB React
application, from user input to API response and display.

================================================================================
TABLE OF CONTENTS
================================================================================
1. Overview
2. Architecture Components
3. Request Flow Diagrams
4. Detailed Component Explanations
5. API Layer
6. Data Flow
7. Search Types
8. Troubleshooting Guide

================================================================================
1. OVERVIEW
================================================================================

The application has TWO main search systems:

A) HOME PAGE SEARCH (Simple Search)
   - Single endpoint search (movies only)
   - Displays trending items when empty
   - Uses: useSearch hook

B) SEARCH PAGE SEARCH (Multi-Search)
   - Multi-endpoint search (movies, TV, people, keywords, collections, companies)
   - Displays trending items when empty
   - Filter-based results display
   - Uses: useMultiSearch hook


================================================================================
2. ARCHITECTURE COMPONENTS
================================================================================

┌─────────────────────────────────────────────────────────────────────────┐
│                           USER INTERFACE LAYER                          │
├─────────────────────────────────────────────────────────────────────────┤
│  • SearchBar Component      : Input field for search queries            │
│  • TrendingList Component   : Displays trending items when no search    │
│  • SearchFilter Component   : Category filter buttons (Movies, TV, etc.)│
│  • SearchingList Component  : Displays search results                   │
│  • MovieSearchCard Component: Individual result card                    │
└─────────────────────────────────────────────────────────────────────────┘
                                    ↕
┌─────────────────────────────────────────────────────────────────────────┐
│                           PAGE/CONTAINER LAYER                          │
├─────────────────────────────────────────────────────────────────────────┤
│  • Home Component         : Homepage with simple search                 │
│  • SearchingPage Component: Dedicated search page with filters          │
└─────────────────────────────────────────────────────────────────────────┘
                                    ↕
┌─────────────────────────────────────────────────────────────────────────┐
│                             HOOK/LOGIC LAYER                            │
├─────────────────────────────────────────────────────────────────────────┤
│  • useSearch Hook         : Simple movie search (Home page)             │
│  • useMultiSearch Hook    : Multi-endpoint search (Search page)         │
│  • useFetchTrending Hook  : Fetch trending content                      │
└─────────────────────────────────────────────────────────────────────────┘
                                    ↕
┌─────────────────────────────────────────────────────────────────────────┐
│                              API LAYER                                  │
├─────────────────────────────────────────────────────────────────────────┤
│  • utils/http.js          : HTTP request utilities (get, httpRequest)   │
│  • lib/api.js             : Core API functions (fetchData, fetchWithRetry)│
│  • lib/config.js          : API configuration (BASE_URL, API_TOKEN)     │
└─────────────────────────────────────────────────────────────────────────┘
                                    ↕
┌─────────────────────────────────────────────────────────────────────────┐
│                          EXTERNAL API                                   │
├─────────────────────────────────────────────────────────────────────────┤
│         TMDB API (The Movie Database)                                   │
│         https://api.themoviedb.org/3                                    │
└─────────────────────────────────────────────────────────────────────────┘


================================================================================
3. REQUEST FLOW DIAGRAMS
================================================================================

═══════════════════════════════════════════════════════════════════════════
3.A) HOME PAGE - SIMPLE SEARCH FLOW
═══════════════════════════════════════════════════════════════════════════

User Types in SearchBar
         │
         ↓
┌────────────────────────┐
│   SearchBar Component  │  → Captures user input
│   (onChange event)     │  → Calls onSearch callback
└────────┬───────────────┘  → Debounces input (800ms)
         │
         ↓
┌────────────────────────┐
│   Home Component       │  → Receives search query
│   handleSearch()       │  → Updates searchQuery state
└────────┬───────────────┘  → Sets showTrendingList (true if query exists)
         │
         ↓
┌────────────────────────┐
│   useSearch Hook       │  → Triggered by query change
│   (Custom Hook)        │  → Returns: { data, loading, error }
└────────┬───────────────┘
         │
         ↓
┌────────────────────────┐
│   utils/http.js        │  → get() function called
│   get(endpoint, params)│  → Builds query string
└────────┬───────────────┘  → Calls httpRequest()
         │
         ↓
┌────────────────────────┐
│   httpRequest()        │  → Constructs full URL: BASE_URL + endpoint
│                        │  → Adds headers (Authorization Bearer token)
│                        │  → Makes fetch() call
└────────┬───────────────┘  → Returns JSON response
         │
         ↓
  TMDB API: /search/movie?query=batman&include_adult=false&language=en-US&page=1
         │
         ↓
┌────────────────────────┐
│   Response Handler     │  → Parse JSON
│                        │  → Check response.ok
└────────┬───────────────┘  → Handle errors
         │
         ↓
┌────────────────────────┐
│   useSearch Hook       │  → setData(response)
│   State Update         │  → setLoading(false)
└────────┬───────────────┘  → Component re-renders
         │
         ↓
┌────────────────────────┐
│   TrendingList         │  → Receives search results
│   Component            │  → Maps through data
└────────┬───────────────┘  → Renders TrendingListElement for each item
         │
         ↓
    Display Results to User


═══════════════════════════════════════════════════════════════════════════
3.B) SEARCH PAGE - MULTI-SEARCH FLOW
═══════════════════════════════════════════════════════════════════════════

User Navigates to /search?query=batman
         │
         ↓
┌────────────────────────┐
│  SearchingPage         │  → Reads URL parameter (useSearchParams)
│  Component             │  → Sets searchQuery state
└────────┬───────────────┘  → Initializes activeFilter (default: 'movies')
         │
         ↓
┌────────────────────────┐
│  useMultiSearch Hook   │  → Triggered by searchQuery
│  (Custom Hook)         │  → Debounces 500ms
└────────┬───────────────┘  → Returns: { results, counts, loading, error }
         │
         ↓
    ┌───┴──────────────────────────────────────────────────────────┐
    │                                                                │
    │  Promise.all() - Parallel API Requests to 6 endpoints:        │
    │                                                                │
    ├─► /search/movie?query=batman     → Movies                    │
    ├─► /search/tv?query=batman        → TV Shows                  │
    ├─► /search/person?query=batman    → People (Actors/Directors) │
    ├─► /search/keyword?query=batman   → Keywords                  │
    ├─► /search/collection?query=batman→ Collections               │
    └─► /search/company?query=batman   → Companies                 │
         │
         ↓
┌────────────────────────┐
│  lib/api.js            │  → fetchData() function
│  fetchData(endpoint)   │  → Constructs URL
└────────┬───────────────┘  → Adds authentication (Bearer or API key)
         │
         ↓
┌────────────────────────┐
│  Authentication Check  │  → Check ACCESS_TOKEN (env or config)
│                        │  → If exists: Add "Authorization: Bearer {token}"
│                        │  → Else: Add "api_key={key}" to URL
└────────┬───────────────┘  → Log authentication method
         │
         ↓
┌────────────────────────┐
│  Fetch Request         │  → fetch(BASE_URL + endpoint)
│                        │  → Include headers
└────────┬───────────────┘  → Await response
         │
         ↓
  TMDB API Returns 6 Responses (one per endpoint)
         │
         ↓
┌────────────────────────┐
│  Response Processing   │  → Each promise resolved/caught individually
│                        │  → Extract: { type, data: { results, total_results } }
└────────┬───────────────┘  → Combine into single object
         │
         ↓
┌────────────────────────┐
│  useMultiSearch Hook   │  → setResults({ movies: [], tv: [], ... })
│  State Update          │  → setCounts({ movies: 0, tv: 0, ... })
└────────┬───────────────┘  → setLoading(false)
         │
         ↓
┌────────────────────────┐
│  SearchingPage         │  → Receives updated results & counts
│  Re-render             │  → Passes to child components
└────────┬───────────────┘
         │
         ├─► SearchFilter Component  → Displays counts per category
         │                           → Highlights active filter
         │
         └─► SearchingList Component → Displays results[activeFilter]
                     │                → Maps through selected category
                     ↓
             MovieSearchCard Component → Individual result display
                     │                  → Shows: poster, title, date, overview
                     ↓
            Display Results to User


================================================================================
4. DETAILED COMPONENT EXPLANATIONS
================================================================================

┌─────────────────────────────────────────────────────────────────────────┐
│ COMPONENT: SearchBar                                                    │
├─────────────────────────────────────────────────────────────────────────┤
│ Location: src/components/SearchBar.jsx                                  │
│                                                                          │
│ Purpose:                                                                 │
│   - Capture user search input                                           │
│   - Display loading state                                               │
│   - Handle clear button                                                 │
│                                                                          │
│ Props:                                                                   │
│   • value         : Current search query (synced from parent)           │
│   • onSearch      : Callback when user types                            │
│   • onClick       : Callback when input is clicked                      │
│   • isLoading     : Show loading spinner                                │
│                                                                          │
│ Key Features:                                                            │
│   - Debouncing: Stops loading 800ms after typing stops                  │
│   - Controlled input: Syncs with parent component state                 │
│   - Clear button: Appears when input has text                           │
│                                                                          │
│ State:                                                                   │
│   • inputValue    : Local input state                                   │
│   • isTyping      : Track if user is actively typing                    │
│   • isSearchEmpty : Track if input is empty                             │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│ COMPONENT: SearchingPage                                                │
├─────────────────────────────────────────────────────────────────────────┤
│ Location: src/pages/SearchingPage.jsx                                   │
│                                                                          │
│ Purpose:                                                                 │
│   - Main search results page                                            │
│   - Coordinate search, filter, and display                              │
│   - Handle URL parameters                                               │
│                                                                          │
│ Key Responsibilities:                                                    │
│   1. Read ?query= from URL (useSearchParams)                            │
│   2. Trigger multi-search via useMultiSearch hook                       │
│   3. Manage active filter state                                         │
│   4. Show trending list when search is empty                            │
│   5. Display search results based on selected filter                    │
│                                                                          │
│ State:                                                                   │
│   • searchQuery       : Current search term                             │
│   • activeFilter      : Selected category (movies/tv/people/etc.)       │
│   • showTrendingList  : Toggle trending vs search display               │
│                                                                          │
│ Child Components:                                                        │
│   - Navbar          : Top navigation                                    │
│   - SearchBar       : Input field                                       │
│   - TrendingList    : Shown when search is empty                        │
│   - SearchFilter    : Category buttons with counts                      │
│   - SearchingList   : Results display                                   │
│                                                                          │
│ Flow:                                                                    │
│   Empty Query    → Show TrendingList                                    │
│   Has Query      → Show SearchFilter + SearchingList                    │
│   Click Outside  → Hide TrendingList                                    │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│ COMPONENT: SearchFilter                                                 │
├─────────────────────────────────────────────────────────────────────────┤
│ Location: src/components/SearchFilter.jsx                               │
│                                                                          │
│ Purpose:                                                                 │
│   - Display filter buttons for each search category                     │
│   - Show result count per category                                      │
│   - Highlight active filter                                             │
│                                                                          │
│ Props:                                                                   │
│   • results       : Object with counts { movies: 50, tv: 20, ... }      │
│   • activeFilter  : Currently selected filter ID                        │
│   • onFilterChange: Callback when filter clicked                        │
│                                                                          │
│ Filter Categories:                                                       │
│   1. movies       : Movies                                              │
│   2. tv           : TV Shows                                            │
│   3. people       : People (actors, directors, etc.)                    │
│   4. keywords     : Keywords                                            │
│   5. collections  : Collections                                         │
│   6. companies    : Companies                                           │
│   7. networks     : Networks (no API endpoint)                          │
│   8. awards       : Awards (no API endpoint)                            │
│                                                                          │
│ Responsive Behavior:                                                     │
│   Desktop (≥1024px)  : Vertical list layout                             │
│   Mobile (<1024px)   : Horizontal slider                                │
│                                                                          │
│ Styling:                                                                 │
│   - Active filter: Cyan color (#01b4e4)                                 │
│   - Hover state: Slightly lighter background                            │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│ COMPONENT: SearchingList                                                │
├─────────────────────────────────────────────────────────────────────────┤
│ Location: src/components/SearchingList.jsx                              │
│                                                                          │
│ Purpose:                                                                 │
│   - Display array of search results                                     │
│   - Handle loading/error/empty states                                   │
│   - Map different data types to consistent format                       │
│                                                                          │
│ Props:                                                                   │
│   • results    : Array of result items                                  │
│   • loading    : Boolean loading state                                  │
│   • error      : Error message or null                                  │
│   • filterType : Current filter type (for data mapping)                 │
│                                                                          │
│ States Handled:                                                          │
│   1. Loading     → "Loading results..."                                 │
│   2. Error       → "Error: {message}"                                   │
│   3. Empty       → "No results found"                                   │
│   4. Results     → Map and display cards                                │
│                                                                          │
│ Data Mapping Logic:                                                      │
│   Movies/TV:                                                             │
│     - title: item.title or item.name                                    │
│     - poster: item.poster_path                                          │
│     - date: item.release_date or item.first_air_date                    │
│                                                                          │
│   People:                                                                │
│     - title: item.name                                                  │
│     - poster: item.profile_path                                         │
│     - overview: item.known_for_department                               │
│                                                                          │
│   Keywords/Collections/Companies:                                        │
│     - title: item.name                                                  │
│     - poster: item.logo_path (companies) or null                        │
│     - No date or overview                                               │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│ COMPONENT: MovieSearchCard                                              │
├─────────────────────────────────────────────────────────────────────────┤
│ Location: src/components/MovieSearchCard.jsx                            │
│                                                                          │
│ Purpose:                                                                 │
│   - Display individual search result                                    │
│   - Show poster, title, date, and overview                              │
│                                                                          │
│ Props:                                                                   │
│   • title          : Main title                                         │
│   • original_title : Original title (different language)                │
│   • release_date   : Release/first air date                             │
│   • poster_path    : Poster image path                                  │
│   • overview       : Description/overview text                          │
│                                                                          │
│ Layout:                                                                  │
│   ┌─────────┬──────────────────────────────────────┐                   │
│   │         │  Title (Original Title)               │                   │
│   │ POSTER  │  Date: January 1, 2020                │                   │
│   │ 94px    │                                        │                   │
│   │         │  Overview text here...                │                   │
│   └─────────┴──────────────────────────────────────┘                   │
│                                                                          │
│ Responsive:                                                              │
│   - 6 breakpoint levels for different screen sizes                      │
│   - Poster takes 100% height with align-items: stretch                  │
│   - Poster width: 94px fixed                                            │
└─────────────────────────────────────────────────────────────────────────┘


================================================================================
5. API LAYER
================================================================================

═══════════════════════════════════════════════════════════════════════════
5.A) API CONFIGURATION
═══════════════════════════════════════════════════════════════════════════

File: src/lib/config.js
┌─────────────────────────────────────────────────────────────────────────┐
│ Exports:                                                                 │
│   • API_TOKEN              : Bearer token for authentication            │
│   • BASE_IMAGE_URL         : Base URL for original images               │
│   • SLIDER_IMAGE_BASE_URL  : Base URL for w200 images                   │
│   • TRENDING_MOVIES_URL    : "/trending/movie"                          │
│   • TRENDING_TV_URL        : "/trending/tv"                             │
│   • TRENDING_ALL_URL       : "/trending/all"                            │
└─────────────────────────────────────────────────────────────────────────┘

File: src/lib/api.js
┌─────────────────────────────────────────────────────────────────────────┐
│ Constants:                                                               │
│   • BASE_URL      : "https://api.themoviedb.org/3"                      │
│   • IMAGE_BASE_URL: "https://image.tmdb.org/t/p"                        │
│   • API_KEY       : import.meta.env.VITE_TMDB_API_KEY                   │
│   • ACCESS_TOKEN  : import.meta.env.VITE_TMDB_ACCESS_TOKEN || API_TOKEN│
│                                                                          │
│ Functions:                                                               │
│   • fetchData(endpoint, options)    : Main fetch function               │
│   • fetchWithRetry(endpoint, retries): Fetch with retry logic           │
│   • getImageUrl(path, size)         : Build image URLs                  │
└─────────────────────────────────────────────────────────────────────────┘

File: src/utils/http.js
┌─────────────────────────────────────────────────────────────────────────┐
│ Functions:                                                               │
│   • httpRequest(endpoint, options) : Generic HTTP request               │
│   • get(endpoint, params)          : GET request with query params      │
│                                                                          │
│ Default Headers:                                                         │
│   - Accept: application/json                                            │
│   - Authorization: Bearer {API_TOKEN}                                   │
│   - Content-Type: application/json                                      │
└─────────────────────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════════════════
5.B) AUTHENTICATION FLOW
═══════════════════════════════════════════════════════════════════════════

┌────────────────────────┐
│  fetchData() called    │
└───────────┬────────────┘
            │
            ↓
┌─────────────────────────────────────────┐
│ Check Authentication:                   │
│                                         │
│ 1. Check ACCESS_TOKEN exists?           │
│    ├─ YES → Use Bearer Authentication   │
│    │        Header: "Authorization:     │
│    │                Bearer {token}"     │
│    │                                    │
│    └─ NO → Check API_KEY exists?        │
│           ├─ YES → Add to URL:          │
│           │        "?api_key={key}"     │
│           │                             │
│           └─ NO → Log error             │
│                   "No authentication!"  │
└───────────┬─────────────────────────────┘
            │
            ↓
┌────────────────────────┐
│  Make fetch() request  │
│  with authentication   │
└────────────────────────┘

Priority Order:
1. Environment Variable: VITE_TMDB_ACCESS_TOKEN
2. Config File Token: API_TOKEN from lib/config.js
3. Environment Variable: VITE_TMDB_API_KEY


═══════════════════════════════════════════════════════════════════════════
5.C) ERROR HANDLING
═══════════════════════════════════════════════════════════════════════════

┌────────────────────────┐
│  API Request Made      │
└───────────┬────────────┘
            │
            ↓
┌────────────────────────┐
│  Check response.ok     │
└───────────┬────────────┘
            │
            ├─ TRUE ──→ Parse JSON ──→ Return data
            │
            └─ FALSE ─→ ┌──────────────────────────────┐
                        │ Error Handling:               │
                        │ 1. Log error response         │
                        │ 2. Throw error with details   │
                        │ 3. Hook catches error         │
                        │ 4. setError(message)          │
                        │ 5. Component displays error   │
                        └───────────────────────────────┘

Individual Search Errors (useMultiSearch):
  Each endpoint promise has .catch() that returns empty results
  This prevents one failed endpoint from breaking all searches


================================================================================
6. DATA FLOW
================================================================================

═══════════════════════════════════════════════════════════════════════════
6.A) useMultiSearch Hook - Internal Data Flow
═══════════════════════════════════════════════════════════════════════════

Input: query = "batman"
  │
  ↓
Check if query is empty
  │
  ├─ EMPTY → Reset results & counts to empty arrays/zeros
  │
  └─ HAS VALUE → Continue...
       │
       ↓
Debounce 500ms (wait for user to stop typing)
       │
       ↓
┌──────────────────────────────────────────────────────────────────────┐
│ Create 6 parallel fetch promises:                                    │
│                                                                       │
│ Promise 1: fetchData('/search/movie?query=batman...')               │
│    ↓                                                                  │
│   .then(data => ({ type: 'movies', data }))                          │
│   .catch(err => ({ type: 'movies', data: { results: [], ... }}))    │
│                                                                       │
│ Promise 2: fetchData('/search/tv?query=batman...')                  │
│    ↓                                                                  │
│   .then(data => ({ type: 'tv', data }))                              │
│   .catch(err => ({ type: 'tv', data: { results: [], ... }}))        │
│                                                                       │
│ Promise 3: fetchData('/search/person?query=batman...')              │
│ Promise 4: fetchData('/search/keyword?query=batman...')             │
│ Promise 5: fetchData('/search/collection?query=batman...')          │
│ Promise 6: fetchData('/search/company?query=batman...')             │
└──────────────────────────────────────────────────────────────────────┘
       │
       ↓
await Promise.all([...6 promises...])
       │
       ↓
┌──────────────────────────────────────────────────────────────────────┐
│ Results Array:                                                        │
│ [                                                                     │
│   { type: 'movies', data: { results: [...], total_results: 50 }},   │
│   { type: 'tv', data: { results: [...], total_results: 20 }},       │
│   { type: 'people', data: { results: [...], total_results: 10 }},   │
│   { type: 'keywords', data: { results: [...], total_results: 5 }},  │
│   { type: 'collections', data: { results: [...], total_results: 3}},│
│   { type: 'companies', data: { results: [...], total_results: 2 }}  │
│ ]                                                                     │
└──────────────────────────────────────────────────────────────────────┘
       │
       ↓
Process results into two objects:
       │
       ├─► newResults = {
       │     movies: [...movie objects...],
       │     tv: [...tv objects...],
       │     people: [...person objects...],
       │     keywords: [...keyword objects...],
       │     collections: [...collection objects...],
       │     companies: [...company objects...],
       │     networks: [],  // Not available in API
       │     awards: []     // Not available in API
       │   }
       │
       └─► newCounts = {
             movies: 50,
             tv: 20,
             people: 10,
             keywords: 5,
             collections: 3,
             companies: 2,
             networks: 0,
             awards: 0
           }
       │
       ↓
setResults(newResults)
setCounts(newCounts)
setLoading(false)
       │
       ↓
Return: { results, counts, loading, error }


═══════════════════════════════════════════════════════════════════════════
6.B) State Flow in SearchingPage
═══════════════════════════════════════════════════════════════════════════

URL: /search?query=batman
  │
  ↓
useSearchParams() → queryParam = "batman"
  │
  ↓
useState() → searchQuery = "batman"
useState() → activeFilter = "movies"
useState() → showTrendingList = false
  │
  ↓
useMultiSearch(searchQuery) → Triggers API calls
  │
  ↓
Returns: {
  results: { movies: [...], tv: [...], ... },
  counts: { movies: 50, tv: 20, ... },
  loading: false,
  error: null
}
  │
  ↓
Pass to children:
  │
  ├─► SearchFilter
  │     Props: results=counts, activeFilter="movies"
  │     Displays: Movies (50), TV Shows (20), People (10), ...
  │
  └─► SearchingList
        Props: results=results[activeFilter], filterType="movies"
        Displays: Array of 50 movie results


User clicks "TV Shows" filter button
  │
  ↓
SearchFilter → onFilterChange("tv")
  │
  ↓
SearchingPage → setActiveFilter("tv")
  │
  ↓
Component re-renders
  │
  ├─► SearchFilter
  │     Props: activeFilter="tv" (button highlighted)
  │
  └─► SearchingList
        Props: results=results["tv"], filterType="tv"
        Displays: Array of 20 TV show results


================================================================================
7. SEARCH TYPES
================================================================================

┌─────────────────────────────────────────────────────────────────────────┐
│ SEARCH TYPE 1: MOVIES                                                   │
├─────────────────────────────────────────────────────────────────────────┤
│ Endpoint: /search/movie                                                  │
│ Parameters:                                                              │
│   • query           : Search term                                       │
│   • include_adult   : false                                             │
│   • language        : en-US                                             │
│   • page            : 1                                                 │
│                                                                          │
│ Response Fields Used:                                                    │
│   • id              : Unique identifier                                 │
│   • title           : Movie title                                       │
│   • original_title  : Original language title                           │
│   • release_date    : Release date (YYYY-MM-DD)                         │
│   • poster_path     : Poster image path                                 │
│   • overview        : Movie description                                 │
│   • vote_average    : Rating                                            │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│ SEARCH TYPE 2: TV SHOWS                                                 │
├─────────────────────────────────────────────────────────────────────────┤
│ Endpoint: /search/tv                                                     │
│ Parameters: Same as movies                                               │
│                                                                          │
│ Response Fields Used:                                                    │
│   • id              : Unique identifier                                 │
│   • name            : TV show name                                      │
│   • original_name   : Original language name                            │
│   • first_air_date  : First air date (YYYY-MM-DD)                       │
│   • poster_path     : Poster image path                                 │
│   • overview        : Show description                                  │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│ SEARCH TYPE 3: PEOPLE                                                   │
├─────────────────────────────────────────────────────────────────────────┤
│ Endpoint: /search/person                                                 │
│ Parameters: Same as movies                                               │
│                                                                          │
│ Response Fields Used:                                                    │
│   • id                   : Unique identifier                            │
│   • name                 : Person's name                                │
│   • profile_path         : Profile photo path                           │
│   • known_for_department : e.g., "Acting", "Directing"                  │
│   • known_for            : Array of notable works                       │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│ SEARCH TYPE 4: KEYWORDS                                                 │
├─────────────────────────────────────────────────────────────────────────┤
│ Endpoint: /search/keyword                                                │
│ Parameters:                                                              │
│   • query           : Search term                                       │
│   • page            : 1                                                 │
│                                                                          │
│ Response Fields Used:                                                    │
│   • id              : Unique identifier                                 │
│   • name            : Keyword name                                      │
│                                                                          │
│ Note: Keywords have minimal data (just id and name)                     │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│ SEARCH TYPE 5: COLLECTIONS                                              │
├─────────────────────────────────────────────────────────────────────────┤
│ Endpoint: /search/collection                                             │
│ Parameters: Same as movies                                               │
│                                                                          │
│ Response Fields Used:                                                    │
│   • id              : Unique identifier                                 │
│   • name            : Collection name                                   │
│   • poster_path     : Collection poster                                 │
│   • backdrop_path   : Backdrop image                                    │
│                                                                          │
│ Example: "The Avengers Collection", "Harry Potter Collection"           │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│ SEARCH TYPE 6: COMPANIES                                                │
├─────────────────────────────────────────────────────────────────────────┤
│ Endpoint: /search/company                                                │
│ Parameters:                                                              │
│   • query           : Search term                                       │
│   • page            : 1                                                 │
│                                                                          │
│ Response Fields Used:                                                    │
│   • id              : Unique identifier                                 │
│   • name            : Company name                                      │
│   • logo_path       : Company logo                                      │
│                                                                          │
│ Example: "Marvel Studios", "Warner Bros."                               │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│ SEARCH TYPE 7 & 8: NETWORKS & AWARDS                                   │
├─────────────────────────────────────────────────────────────────────────┤
│ Status: NOT AVAILABLE IN TMDB API v3                                    │
│                                                                          │
│ These filters are displayed in the UI but always return empty results   │
│ Hard-coded in useMultiSearch hook:                                      │
│   newResults.networks = [];                                             │
│   newResults.awards = [];                                               │
│   newCounts.networks = 0;                                               │
│   newCounts.awards = 0;                                                 │
└─────────────────────────────────────────────────────────────────────────┘


================================================================================
8. TROUBLESHOOTING GUIDE
================================================================================

┌─────────────────────────────────────────────────────────────────────────┐
│ PROBLEM: Search returns no results for any query                        │
├─────────────────────────────────────────────────────────────────────────┤
│ Possible Causes:                                                         │
│   1. API authentication not configured                                  │
│   2. Network/firewall blocking API                                      │
│   3. TMDB API service down                                              │
│                                                                          │
│ Solutions:                                                               │
│   1. Check browser console for errors                                   │
│   2. Verify API_TOKEN in src/lib/config.js is valid                    │
│   3. Check network tab for API response status                          │
│   4. Look for console logs: "Using Bearer token authentication"         │
│   5. Try searching "batman" or "avengers" (known to have results)       │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│ PROBLEM: Results only show for Movies, not other filters                │
├─────────────────────────────────────────────────────────────────────────┤
│ Possible Causes:                                                         │
│   1. activeFilter state not updating                                    │
│   2. results object not properly structured                             │
│   3. SearchingList not receiving correct data                           │
│                                                                          │
│ Solutions:                                                               │
│   1. Check console logs: "Final results:" and "Final counts:"           │
│   2. Verify results object has all categories with data                 │
│   3. Check if clicking filter calls onFilterChange                      │
│   4. Verify SearchingList receives results[activeFilter]                │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│ PROBLEM: Trending list not showing when search is empty                 │
├─────────────────────────────────────────────────────────────────────────┤
│ Possible Causes:                                                         │
│   1. showTrendingList state stuck at false                              │
│   2. useFetchTrending hook not fetching data                            │
│   3. TrendingList component not rendering                               │
│                                                                          │
│ Solutions:                                                               │
│   1. Clear search input and check showTrendingList state                │
│   2. Verify useFetchTrending returns data                               │
│   3. Check conditional render: {showTrendingList && <TrendingList />}   │
│   4. Test clicking in SearchBar to trigger onClick                      │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│ PROBLEM: Search is slow or times out                                    │
├─────────────────────────────────────────────────────────────────────────┤
│ Possible Causes:                                                         │
│   1. Making too many API calls                                          │
│   2. No debouncing on input                                             │
│   3. Network latency                                                     │
│                                                                          │
│ Solutions:                                                               │
│   1. Verify debounce timers are working:                                │
│      - SearchBar: 800ms                                                 │
│      - useMultiSearch: 500ms                                            │
│   2. Check Network tab to see request timing                            │
│   3. Verify Promise.all is being used (parallel, not sequential)        │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│ PROBLEM: Images not loading                                             │
├─────────────────────────────────────────────────────────────────────────┤
│ Possible Causes:                                                         │
│   1. poster_path is null                                                │
│   2. Image URL not constructed correctly                                │
│   3. TMDB image server issue                                            │
│                                                                          │
│ Solutions:                                                               │
│   1. Check if poster_path exists in API response                        │
│   2. Verify image URL: https://image.tmdb.org/t/p/w500{poster_path}    │
│   3. Fallback to placeholder should show if no image                    │
│   4. Check browser console for 404 errors                               │
└─────────────────────────────────────────────────────────────────────────┘


================================================================================
DEBUGGING CONSOLE LOGS
================================================================================

The application has extensive console logging for debugging:

Authentication:
  ✓ "Using Bearer token authentication"
  ✓ "Using API key authentication"
  ✗ "No API authentication configured!"

API Requests:
  ✓ "Fetching: https://api.themoviedb.org/3/search/movie?query=..."

Search Results (per category):
  ✓ "Movies results: { results: [...], total_results: 50 }"
  ✓ "TV results: { results: [...], total_results: 20 }"
  ✓ "People results: ..."
  ✓ "Keywords results: ..."
  ✓ "Collections results: ..."
  ✓ "Companies results: ..."

Search Errors (per category):
  ✗ "Movies search error: [Error details]"
  ✗ "TV search error: ..."
  (and so on for each category)

Final Results:
  ✓ "Final results: { movies: [...], tv: [...], ... }"
  ✓ "Final counts: { movies: 50, tv: 20, ... }"

General Errors:
  ✗ "Fetch error: [Error details]"
  ✗ "API Error Response: [Response text]"
  ✗ "Multi-search error: [Error details]"


================================================================================
API ENDPOINTS REFERENCE
================================================================================

Base URL: https://api.themoviedb.org/3

Search Endpoints:
  /search/movie
  /search/tv
  /search/person
  /search/keyword
  /search/collection
  /search/company

Trending Endpoints:
  /trending/movie/day
  /trending/movie/week
  /trending/tv/day
  /trending/tv/week
  /trending/all/day
  /trending/all/week

Image URLs:
  https://image.tmdb.org/t/p/w500/{poster_path}     - Posters
  https://image.tmdb.org/t/p/w200/{poster_path}     - Thumbnails
  https://image.tmdb.org/t/p/original/{poster_path} - Full size


================================================================================
END OF DOCUMENTATION
================================================================================

For more information about TMDB API:
  https://developers.themoviedb.org/3

Last Updated: October 2, 2025
